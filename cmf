html


<template>
    <lightning-button label="Submit Form" onclick={handleSubmitForm}></lightning-button>
    <template if:true={errorMessage}>
        <div class="slds-box slds-theme_error slds-m-top_medium">
            <p>{errorMessage}</p>
        </div>
    </template>
    <template if:true={successMessage}>
        <div class="slds-box slds-theme_success slds-m-top_medium">
            <p>{successMessage}</p>
        </div>
    </template>
</template>



js


import { LightningElement, api, track } from 'lwc';
import validateAndSubmit from '@salesforce/apex/SubmitFormComponentController.validateAndSubmit';

export default class SubmitFormComponent extends LightningElement {
    @api recordId;
    @track errorMessage = '';
    @track successMessage = '';

    handleSubmitForm() {
        validateAndSubmit({ cashFormId: this.recordId })
            .then(result => {
                if (result === 'Not all forms are filled out') {
                    this.errorMessage = result;
                    this.successMessage = '';
                } else {
                    this.successMessage = result;
                    this.errorMessage = '';
                }
            })
            .catch(error => {
                this.errorMessage = 'An error occurred: ' + error.body.message;
                this.successMessage = '';
            });
    }
}




css



.slds-box {
    padding: 1rem;
}




class




public class SubmitFormComponentController {
    @AuraEnabled
    public static String validateAndSubmit(Id cashFormId) {
        // Fetch all related objects
        List<ChildObject1__c> child1Records = [SELECT Id FROM ChildObject1__c WHERE CashForm__c = :cashFormId];
        List<ChildObject2__c> child2Records = [SELECT Id FROM ChildObject2__c WHERE CashForm__c = :cashFormId];
        // Add checks for other child objects as needed
        
        // Validation: Check if at least one record of each child object exists
        if (child1Records.isEmpty() || child2Records.isEmpty()) {
            return 'Not all forms are filled out';
        }
        
        // If validation passes, create a new Case
        Case newCase = new Case(
            Subject = 'New Case for Cash Management Form',
            CashManagementForm__c = cashFormId
        );
        insert newCase;
        
        return 'Validation passed, case created successfully';
    }
}
