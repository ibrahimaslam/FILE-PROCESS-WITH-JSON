import { LightningElement, track, wire } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { createRecord } from 'lightning/uiRecordApi';
import { getRecord } from 'lightning/uiRecordApi';
import ACCOUNT_OBJECT from '@salesforce/schema/Account';
import CASH_MANAGEMENT_FORM_OBJECT from '@salesforce/schema/Cash_Management_Form__c';
import REQUESTOR_NAME_FIELD from '@salesforce/schema/Cash_Management_Form__c.Requestor_Name__c';
import CLIENT_NAME_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_Name__c';
import CLIENT_SRF_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_SRF__c';
import CLIENT_TYPE_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_Type__c';
import DATE_FIELD from '@salesforce/schema/Cash_Management_Form__c.Date__c';
import { NavigationMixin } from 'lightning/navigation';

export default class CashManagementForm extends NavigationMixin(LightningElement) {
    @track RequestorName = '';
    @track clientName = '';
    @track clientSRF = '';
    @track clientType = '';
    @track SelectedDate = '';
    @track selectedProducts = [];

    handleRequestorNameChange(event) {
        this.RequestorName = event.target.value;
    }

    handleClientNameChange(event) {
        this.clientName = event.detail.value;
        // Call the wire service to get the SRF value
        if (this.clientName) {
            getRecord({ recordId: this.clientName, fields: ['Account.SRF__c'] })
                .then(record => {
                    this.clientSRF = record.fields.SRF__c.value;
                })
                .catch(error => {
                    console.error('Error retrieving SRF:', error);
                });
        } else {
            this.clientSRF = '';
        }
    }

    handleClientSRFChange(event) {
        this.clientSRF = event.target.value;
    }

    handleClientTypeChange(event) {
        this.clientType = event.detail.value;
    }

    handleCheckboxChange(event) {
        const productName = event.target.label;
        if (event.target.checked) {
            this.selectedProducts.push(productName);
        } else {
            this.selectedProducts = this.selectedProducts.filter(product => product !== productName);
        }
    }

    handleDateChange(event) {
        this.SelectedDate = event.detail.value;
    }

    handleSubmit() {
        const fields = {};
        fields[REQUESTOR_NAME_FIELD.fieldApiName] = this.RequestorName;
        fields[CLIENT_NAME_FIELD.fieldApiName] = this.clientName;  // Ensure this holds Account ID
        fields[CLIENT_SRF_FIELD.fieldApiName] = this.clientSRF;
        fields[CLIENT_TYPE_FIELD.fieldApiName] = this.clientType;
        fields[DATE_FIELD.fieldApiName] = this.SelectedDate;

        const recordInput = { apiName: CASH_MANAGEMENT_FORM_OBJECT.objectApiName, fields };

        createRecord(recordInput)
            .then(record => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Cash Management Form created successfully',
                        variant: 'success',
                    }),
                );
                this.resetForm();
                // Navigate to next LWC with recordId and selectedProducts
                this[NavigationMixin.Navigate]({
                    type: 'standard__navItemPage',
                    attributes: {
                        apiName: 'Cash_Management_Form_Details_Page',
                    },
                    state: {
                        c__recordId: record.id,
                        c__selectedProducts: this.selectedProducts.join(',')
                    }
                });
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
    }

    resetForm() {
        this.RequestorName = '';
        this.clientName = '';
        this.clientSRF = '';
        this.clientType = '';
        this.SelectedDate = '';
        this.selectedProducts = [];
    }

    handleClickUrl(){
        window.open('http://rbcnet.fg.rbc.com/ACH/file-828674.pdf','_blank');
    }

    get clientTypeOptions() {
        return [
            { label: 'Commercial Financial Services Client', value: 'Commercial Financial Services Client'},
            { label: 'GBSC Serviced Client', value: 'GBSC Serviced Client' },
            { label: 'Private Banking CBR Client', value: 'Private Banking CBR Client' },
        ];
    }

    get isCommercialClient() {
        return this.clientType === 'Commercial Financial Services Client';
    }

    get isGBSCClient() {
        return this.clientType === 'GBSC Serviced Client';
    }

    get isPrivateBankingClient() {
        return this.clientType === 'Private Banking CBR Client';
    }
}
