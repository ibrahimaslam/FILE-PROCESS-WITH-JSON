js




import { LightningElement, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { createRecord } from 'lightning/uiRecordApi';
import { NavigationMixin } from 'lightning/navigation';
import CASH_MANAGEMENT_FORM_OBJECT from '@salesforce/schema/Cash_Management_Form__c';
import REQUESTOR_NAME_FIELD from '@salesforce/schema/Cash_Management_Form__c.Requestor_Name__c';
import CLIENT_NAME_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_Name__c';
import CLIENT_SRF_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_SRF__c';
import CLIENT_TYPE_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_Type__c';
import DATE_FIELD from '@salesforce/schema/Cash_Management_Form__c.Date__c';
import SELECTED_PRODUCTS_FIELD from '@salesforce/schema/Cash_Management_Form__c.Selected_Products__c';

export default class CashManagementForm extends NavigationMixin(LightningElement) {
    @track RequestorName = '';
    @track clientName = '';
    @track clientSRF = '';
    @track clientType = '';
    @track SelectedDate = '';
    @track selectedProducts = [];

    handleRequestorNameChange(event) {
        this.RequestorName = event.target.value;
    }

    handleClientNameChange(event) {
        this.clientName = event.target.value;
    }

    handleClientSRFChange(event) {
        this.clientSRF = event.target.value;
    }

    handleClientTypeChange(event) {
        this.clientType = event.detail.value;
    }

    handleCheckboxChange(event) {
        const checkboxValue = event.target.label;
        if (event.target.checked) {
            this.selectedProducts.push(checkboxValue);
        } else {
            const index = this.selectedProducts.indexOf(checkboxValue);
            if (index > -1) {
                this.selectedProducts.splice(index, 1);
            }
        }
        console.log('Selected Products:', this.selectedProducts);  // Debugging line
    }

    handleDateChange(event) {
        this.SelectedDate = event.detail.value;
    }

    handleNext() {
        console.log('Navigating with selected products:', this.selectedProducts);  // Debugging line
        this[NavigationMixin.Navigate]({
            type: 'standard__navItemPage',
            attributes: {
                apiName: 'Cash_Management_Form_Details_Page',  // Use the API name of your new Lightning App Page
            },
            state: {
                c__selectedProducts: this.selectedProducts.join(';')
            }
        });
    }
    
    handleSubmit() {
        const fields = {};
        fields[REQUESTOR_NAME_FIELD.fieldApiName] = this.RequestorName;
        fields[CLIENT_NAME_FIELD.fieldApiName] = this.clientName;
        fields[CLIENT_SRF_FIELD.fieldApiName] = this.clientSRF;
        fields[CLIENT_TYPE_FIELD.fieldApiName] = this.clientType;
        fields[DATE_FIELD.fieldApiName] = this.SelectedDate;
        fields[SELECTED_PRODUCTS_FIELD.fieldApiName] = this.selectedProducts.join(';');

        const recordInput = { apiName: CASH_MANAGEMENT_FORM_OBJECT.objectApiName, fields };

        createRecord(recordInput)
            .then(() => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Cash Management Form created successfully',
                        variant: 'success',
                    }),
                );
                this.resetForm();
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
    }

    resetForm() {
        this.RequestorName = '';
        this.clientName = '';
        this.clientSRF = '';
        this.clientType = '';
        this.SelectedDate = '';
        this.selectedProducts = [];
    }

    handleClickUrl() {
        window.open('http://rbcnet.fg.rbc.com/ACH/file-828674.pdf','_blank');
    }

    get clientTypeOptions() {
        return [
            { label: 'Commercial Financial Services Client', value: 'Commercial Financial Services Client' },
            { label: 'GBSC Serviced Client', value: 'GBSC Serviced Client' },
            { label: 'Private Banking CBR Client', value: 'Private Banking CBR Client' },
        ];
    }

    get isCommercialClient() {
        return this.clientType === 'Commercial Financial Services Client';
    }

    get isGBSCClient() {
        return this.clientType === 'GBSC Serviced Client';
    }

    get isPrivateBankingClient() {
        return this.clientType === 'Private Banking CBR Client';
    }
}











js



import { LightningElement, track } from 'lwc';
import { NavigationMixin } from 'lightning/navigation';

export default class Rbcpcb_CashManagementFormDetails extends NavigationMixin(LightningElement) {
    @track selectedFormsArray = [];

    connectedCallback() {
        const urlParams = new URLSearchParams(window.location.search);
        const selectedForms = urlParams.get('c__selectedProducts');
        
        console.log('Retrieved selected forms:', selectedForms);  // Debugging line
        
        if (selectedForms) {
            this.selectedFormsArray = selectedForms.split(';').map(form => {
                return {
                    name: form,
                    isChangeAddress: form === 'Change Address',
                    isServiceAdministrator: form === 'Service Administrator'
                };
            });
        }
    }

    get hasSelectedForms() {
        return this.selectedFormsArray.length > 0;
    }

    handleBack() {
        this[NavigationMixin.Navigate]({
            type: 'standard__navItemPage',
            attributes: {
                apiName: 'Cash_Management_Form',  // The API name of your tab or page for the first LWC
            },
        });
    }
}






html




<template>
    <lightning-card title="Cash Management Form Details">
        <template if:true={hasSelectedForms}>
            <template for:each={selectedFormsArray} for:item="form">
                <div key={form.name}>
                    <template if:true={form.isChangeAddress}>
                        <lightning-record-edit-form object-api-name="Change_Address_Form__c">
                            <lightning-messages></lightning-messages>
                            <!-- Include necessary fields for Change Address form -->
                            <lightning-input-field field-name="Street__c"></lightning-input-field>
                            <lightning-input-field field-name="City__c"></lightning-input-field>
                            <lightning-input-field field-name="State__c"></lightning-input-field>
                            <lightning-input-field field-name="Postal_Code__c"></lightning-input-field>
                            <lightning-button type="submit" label="Save"></lightning-button>
                        </lightning-record-edit-form>
                    </template>
                    <template if:true={form.isServiceAdministrator}>
                        <lightning-record-edit-form object-api-name="Service_Administrator_Form__c">
                            <lightning-messages></lightning-messages>
                            <!-- Include necessary fields for Service Administrator form -->
                            <lightning-input-field field-name="Admin_Name__c"></lightning-input-field>
                            <lightning-input-field field-name="Admin_Email__c"></lightning-input-field>
                            <lightning-input-field field-name="Admin_Phone__c"></lightning-input-field>
                            <lightning-button type="submit" label="Save"></lightning-button>
                        </lightning-record-edit-form>
                    </template>
                </div>
            </template>
        </template>
        <template if:false={hasSelectedForms}>
            <p>No forms selected.</p>
        </template>
        <lightning-button class="slds-m-top_medium" variant="neutral" label="Back" onclick={handleBack}></lightning-button>
    </lightning-card>
</template>

