import { LightningElement, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { createRecord } from 'lightning/uiRecordApi';
import { NavigationMixin } from 'lightning/navigation';
import CASH_MANAGEMENT_FORM_OBJECT from '@salesforce/schema/Cash_Management_Form__c';
import REQUESTOR_NAME_FIELD from '@salesforce/schema/Cash_Management_Form__c.Requestor_Name__c';
import CLIENT_NAME_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_Name__c';
import CLIENT_TYPE_FIELD from '@salesforce/schema/Cash_Management_Form__c.Client_Type__c';
import DATE_FIELD from '@salesforce/schema/Cash_Management_Form__c.Date__c';
import MAINTENANCE_PRODUCTS_FIELD from '@salesforce/schema/Cash_Management_Form__c.Maintenance_Products__c';

export default class CashManagementForm extends NavigationMixin(LightningElement) {
    @track RequestorName = '';
    @track clientName = '';
    @track clientType = '';
    @track SelectedDate = '';
    @track selectedProducts = [];

    handleRequestorNameChange(event) {
        this.RequestorName = event.target.value;
    }

    handleClientNameChange(event) {
        this.clientName = event.detail.value;
    }

    handleCheckboxChange(event) {
        const { label, checked } = event.target;
        if (checked) {
            this.selectedProducts.push(label);
        } else {
            this.selectedProducts = this.selectedProducts.filter(item => item !== label);
        }
    }

    handleDateChange(event) {
        this.SelectedDate = event.detail.value;
    }

    handleClientTypeChange(event) {
        this.clientType = event.detail.value;
    }

    handleSubmit() {
        const fields = {};
        fields[REQUESTOR_NAME_FIELD.fieldApiName] = this.RequestorName;
        fields[CLIENT_NAME_FIELD.fieldApiName] = this.clientName[0];  // Ensure clientName is set as a single value
        fields[CLIENT_TYPE_FIELD.fieldApiName] = this.clientType;
        fields[DATE_FIELD.fieldApiName] = this.SelectedDate;
        fields[MAINTENANCE_PRODUCTS_FIELD.fieldApiName] = this.selectedProducts.join(',');

        const recordInput = { apiName: CASH_MANAGEMENT_FORM_OBJECT.objectApiName, fields };

        createRecord(recordInput)
            .then((record) => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Cash Management Form created successfully',
                        variant: 'success',
                    }),
                );
                this.resetForm();
                this.navigateToNextPage(record.id);
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
    }

    handleNext() {
        this.handleSubmit();
    }

    resetForm() {
        this.RequestorName = '';
        this.clientName = '';
        this.clientType = '';
        this.SelectedDate = '';
        this.selectedProducts = [];
    }

    navigateToNextPage(recordId) {
        this[NavigationMixin.Navigate]({
            type: 'standard__navItemPage',
            attributes: {
                apiName: 'Cash_Management_Form_Details_Page',
            },
            state: {
                c__recordId: recordId
            }
        });
    }

    handleClickUrl() {
        window.open('http://rbcnet.fg.rbc.com/ACH/file-828674.pdf', '_blank');
    }

    get clientTypeOptions() {
        return [
            { label: 'Commercial Financial Services Client', value: 'Commercial Financial Services Client' },
            { label: 'GBSC Serviced Client', value: 'GBSC Serviced Client' },
            { label: 'Private Banking CBR Client', value: 'Private Banking CBR Client' },
        ];
    }

    get isCommercialClient() {
        return this.clientType === 'Commercial Financial Services Client';
    }

    get isGBSCClient() {
        return this.clientType === 'GBSC Serviced Client';
    }

    get isPrivateBankingClient() {
        return this.clientType === 'Private Banking CBR Client';
    }
}





css

.slds-m-around_small {
    margin: 1rem;
}

.section-header h2 {
    font-size: 1.5rem;
    font-weight: bold;
}

.section-divider {
    border-top: 1px solid #d8dde6;
    margin-bottom: 1rem;
}

.subheading {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.notes {
    font-style: italic;
    color: #636363;
    margin-top: 0.5rem;
}

.clickable {
    color: #1a73e8;
    cursor: pointer;
}

.clickable:hover {
    text-decoration: underline;
}
